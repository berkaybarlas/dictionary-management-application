{"ast":null,"code":"import _classCallCheck from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/berkaybarlas/Desktop/git/onedot/src/components/Dictionary/Dictionaries.js\";\nimport React, { Component } from 'react';\nimport './Dictionary.css';\nimport Dictionary from './Dictionary';\n\nvar Dictionaries =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dictionaries, _Component);\n\n  function Dictionaries(props) {\n    var _this;\n\n    _classCallCheck(this, Dictionaries);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dictionaries).call(this, props));\n\n    _this.handleClick = function (dictId) {\n      //use change\n      var dictionaries = _this.state.dictionaries;\n      var index = dictionaries.findIndex(function (e) {\n        return e.id === dictId;\n      });\n\n      if (index === -1) {\n        return;\n      }\n\n      _this.setState(function (state) {\n        return {\n          lastDictId: dictId\n        };\n      }, function () {\n        return _this.props.change(_this.dictionaries[index].items);\n      });\n    };\n\n    _this.updateTable = function (dictId, items) {\n      var dictionaries = _this.state.dictionaries;\n      var index = dictionaries.findIndex(function (e) {\n        return e.id === dictId;\n      });\n\n      if (index === -1) {\n        return;\n      } else {\n        dictionaries[index].items = items;\n      }\n\n      _this.setState(function (state) {\n        return {\n          dictionaries: dictionaries\n        };\n      }, function () {\n        _this.saveToStorage();\n      });\n    };\n\n    _this.state = {\n      dictionaries: [],\n      items: [],\n      dictionary: '',\n      history: [],\n      lastDictId: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.saveToStorage = _this.saveToStorage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTable = _this.updateTable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dictionaries, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState({\n        dictionary: e.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n\n      if (!this.state.dictionary.length) {\n        return;\n      }\n\n      var newItem = {\n        id: Date.now(),\n        name: this.state.dictionary,\n        items: this.props.items\n      };\n      this.setState(function (state) {\n        return {\n          dictionaries: state.dictionaries.concat(newItem),\n          dictionary: '',\n          lastDictId: newItem.id\n        };\n      }, function () {\n        _this2.saveToStorage();\n      }); //this.props.change([]);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // You don't have to do this check first, but it can help prevent an unneeded render\n      if (nextProps !== undefined & nextProps.items !== this.state.items & nextProps.items !== []) {\n        this.setState({\n          items: nextProps.items\n        });\n        console.log(\"updateState\");\n        this.updateTable(this.state.lastDictId, nextProps.items);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"table-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Dictionaries\"), React.createElement(\"div\", {\n        className: \"Dictionaries\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dictionary-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.dictionaries.map(function (item) {\n        return React.createElement(Dictionary, {\n          key: item.id,\n          item: item,\n          change: _this3.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      })), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"Form\",\n        onChange: this.handleChange,\n        value: this.state.dictionary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"Button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \" Add\"))));\n    }\n  }, {\n    key: \"saveToStorage\",\n    value: function saveToStorage() {\n      var data = this.state.history;\n      data.items = this.state.items;\n      localStorage.setItem('dictinaries', JSON.stringify(data));\n    }\n  }]);\n\n  return Dictionaries;\n}(Component);\n\nexport default Dictionaries;","map":{"version":3,"sources":["/Users/berkaybarlas/Desktop/git/onedot/src/components/Dictionary/Dictionaries.js"],"names":["React","Component","Dictionary","Dictionaries","props","handleClick","dictId","dictionaries","state","index","findIndex","e","id","setState","lastDictId","change","items","updateTable","saveToStorage","dictionary","history","handleChange","bind","handleSubmit","target","value","preventDefault","length","newItem","Date","now","name","concat","nextProps","undefined","console","log","map","item","data","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Dictionary.css';\nimport Dictionary from './Dictionary'\n\nclass Dictionaries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dictionaries: [],\n            items: [],\n            dictionary: '',\n            history: [],\n            lastDictId: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.saveToStorage = this.saveToStorage.bind(this);\n        this.updateTable = this.updateTable.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ dictionary: e.target.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if (!this.state.dictionary.length) {\n            return;\n        }\n        const newItem = {\n            id: Date.now(),\n            name: this.state.dictionary,\n            items: this.props.items,\n        }\n\n        this.setState(state => ({\n            dictionaries: state.dictionaries.concat(newItem),\n            dictionary: '',\n            lastDictId: newItem.id,\n        }), () => { this.saveToStorage() });\n\n        //this.props.change([]);\n    }\n\n    handleClick = (dictId) => {\n        //use change\n        const dictionaries = this.state.dictionaries;\n        const index = dictionaries.findIndex((e) => e.id === dictId);\n\n        if (index === -1) {\n            return;\n        }\n\n        this.setState(state => ({\n            lastDictId: dictId,\n        }), ()=> this.props.change(this.dictionaries[index].items) );\n    }\n\n    updateTable = (dictId, items) => {\n        const dictionaries = this.state.dictionaries;\n        const index = dictionaries.findIndex((e) => e.id === dictId);\n\n        if (index === -1) {\n            return;\n        } else {\n            dictionaries[index].items = items;\n        }\n        this.setState(state => ({\n            dictionaries: dictionaries,\n        }), () => { this.saveToStorage() });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // You don't have to do this check first, but it can help prevent an unneeded render\n        if ((nextProps !== undefined) & nextProps.items !== this.state.items & nextProps.items !== []) {\n            this.setState({ items: nextProps.items });\n            console.log(\"updateState\");\n            this.updateTable(this.state.lastDictId, nextProps.items);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <header className=\"table-header\">\n                    Dictionaries\n            </header>\n                <div className=\"Dictionaries\">\n                    <div className=\"dictionary-list\">\n                        {this.state.dictionaries.map(item => (\n                            <Dictionary\n                                key={item.id}\n                                item={item}\n                                change={this.handleClick} />\n                        ))}\n                    </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <input\n                            className=\"Form\"\n                            onChange={this.handleChange}\n                            value={this.state.dictionary} />\n                        <button className=\"Button\"> Add</button>\n                    </form>\n\n                </div>\n            </div>\n        );\n    }\n    saveToStorage() {\n        let data = this.state.history;\n        data.items = this.state.items;\n        localStorage.setItem('dictinaries', JSON.stringify(data));\n    }\n}\nexport default Dictionaries;\n"]},"metadata":{},"sourceType":"module"}