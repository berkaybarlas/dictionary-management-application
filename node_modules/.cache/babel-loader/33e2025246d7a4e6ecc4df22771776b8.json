{"ast":null,"code":"import _classCallCheck from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/berkaybarlas/Desktop/git/onedot/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/berkaybarlas/Desktop/git/onedot/src/components/Dictionary/Dictionaries.js\";\nimport React, { Component } from 'react';\nimport './Dictionary.css';\nimport Dictionary from './Dictionary';\nimport addIcon from \"../../assets/add.svg\";\n\nvar Dictionaries =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dictionaries, _Component);\n\n  function Dictionaries(props) {\n    var _this;\n\n    _classCallCheck(this, Dictionaries);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dictionaries).call(this, props));\n\n    _this.handleClick = function (dictId) {\n      var dictionaries = _this.state.dictionaries;\n      var index = dictionaries.findIndex(function (e) {\n        return e.id === dictId;\n      });\n\n      if (index === -1) {\n        return;\n      }\n\n      _this.setState(function (state) {\n        return {\n          lastDictId: dictId\n        };\n      }, function () {\n        return _this.props.change(_this.state.dictionaries[index].items, _this.state.dictionaries[index].name);\n      });\n    };\n\n    _this.updateTable = function (dictId, items) {\n      var dictionaries = _this.state.dictionaries;\n      var index = dictionaries.findIndex(function (e) {\n        return e.id === dictId;\n      });\n\n      if (index === -1) {\n        return;\n      } else {\n        dictionaries[index].items = items;\n      }\n\n      _this.setState(function (state) {\n        return {\n          dictionaries: dictionaries\n        };\n      }, function () {\n        _this.saveToStorage();\n      });\n    };\n\n    _this.state = {\n      dictionaries: [],\n      items: [],\n      dictionary: '',\n      history: {\n        dictionaries: []\n      },\n      lastDictId: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.saveToStorage = _this.saveToStorage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateTable = _this.updateTable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dictionaries, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      this.setState({\n        dictionary: e.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n\n      if (!this.state.dictionary.length) {\n        return;\n      }\n\n      var newItems = [];\n\n      if (this.state.lastDictId === '') {\n        newItems = this.props.items;\n      }\n\n      var newItem = {\n        id: Date.now(),\n        name: this.state.dictionary,\n        items: newItems\n      };\n      this.setState(function (state) {\n        return {\n          dictionaries: state.dictionaries.concat(newItem),\n          dictionary: '',\n          lastDictId: newItem.id\n        };\n      }, function () {\n        _this2.handleClick(newItem.id);\n\n        _this2.saveToStorage();\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // You don't have to do this check first, but it can help prevent an unneeded render\n      if (nextProps !== undefined & nextProps.items !== this.state.items & nextProps.items !== []) {\n        this.setState({\n          items: nextProps.items\n        });\n        console.log(\"updateState\");\n        this.updateTable(this.state.lastDictId, nextProps.items);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"table-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Dictionaries\"), React.createElement(\"div\", {\n        className: \"Dictionaries\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dictionary-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.state.dictionaries.map(function (item) {\n        return React.createElement(Dictionary, {\n          key: item.id,\n          item: item,\n          change: _this3.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n      })), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"Form\",\n        onChange: this.handleChange,\n        value: this.state.dictionary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"Button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        width: 17,\n        src: addIcon,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"saveToStorage\",\n    value: function saveToStorage() {\n      var data = this.state.history;\n      data.dictionaries = this.state.dictionaries;\n      localStorage.setItem('dictionaries', JSON.stringify(data));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.recover();\n    }\n  }, {\n    key: \"recover\",\n    value: function recover() {\n      //error catch\n      var data = JSON.parse(localStorage.getItem('dictionaries'));\n\n      if (!data) {\n        return;\n      }\n\n      console.log(data);\n      this.setState({\n        history: data,\n        dictionaries: data.dictionaries\n      });\n    }\n  }]);\n\n  return Dictionaries;\n}(Component);\n\nexport default Dictionaries;","map":{"version":3,"sources":["/Users/berkaybarlas/Desktop/git/onedot/src/components/Dictionary/Dictionaries.js"],"names":["React","Component","Dictionary","Dictionaries","props","handleClick","dictId","dictionaries","state","index","findIndex","e","id","setState","lastDictId","change","items","name","updateTable","saveToStorage","dictionary","history","handleChange","bind","handleSubmit","target","value","preventDefault","length","newItems","newItem","Date","now","concat","nextProps","undefined","console","log","map","item","addIcon","data","localStorage","setItem","JSON","stringify","recover","parse","getItem"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Dictionary.css';\nimport Dictionary from './Dictionary'\nimport addIcon from \"../../assets/add.svg\"\n\nclass Dictionaries extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dictionaries: [],\n            items: [],\n            dictionary: '',\n            history: {dictionaries:[]},\n            lastDictId: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.saveToStorage = this.saveToStorage.bind(this);\n        this.updateTable = this.updateTable.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ dictionary: e.target.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if (!this.state.dictionary.length) {\n            return;\n        }\n        let newItems = [];\n        if (this.state.lastDictId === '') {\n            newItems = this.props.items;\n        }\n        const newItem = {\n            id: Date.now(),\n            name: this.state.dictionary,\n            items: newItems,\n        }\n\n        this.setState(state => ({\n            dictionaries: state.dictionaries.concat(newItem),\n            dictionary: '',\n            lastDictId: newItem.id,\n        }), () => { \n            this.handleClick(newItem.id);\n            this.saveToStorage(); \n        });\n    }\n\n    handleClick = (dictId) => {\n        const dictionaries = this.state.dictionaries;\n        const index = dictionaries.findIndex((e) => e.id === dictId);\n\n        if (index === -1) {\n            return;\n        }\n\n        this.setState(state => ({\n            lastDictId: dictId,\n        }), () => this.props.change(this.state.dictionaries[index].items,this.state.dictionaries[index].name));\n    }\n\n    updateTable = (dictId, items) => {\n        const dictionaries = this.state.dictionaries;\n        const index = dictionaries.findIndex((e) => e.id === dictId);\n\n        if (index === -1) {\n            return;\n        } else {\n            dictionaries[index].items = items;\n        }\n        this.setState(state => ({\n            dictionaries: dictionaries,\n        }), () => { this.saveToStorage() });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // You don't have to do this check first, but it can help prevent an unneeded render\n        if ((nextProps !== undefined) & nextProps.items !== this.state.items & nextProps.items !== []) {\n            this.setState({ items: nextProps.items });\n            console.log(\"updateState\");\n            this.updateTable(this.state.lastDictId, nextProps.items);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <header className=\"table-header\">\n                    Dictionaries\n            </header>\n                <div className=\"Dictionaries\">\n                    <div className=\"dictionary-list\">\n                        {this.state.dictionaries.map(item => (\n                            <Dictionary\n                                key={item.id}\n                                item={item}\n                                change={this.handleClick} />\n                        ))}\n                    </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <input\n                            className=\"Form\"\n                            onChange={this.handleChange}\n                            value={this.state.dictionary} />\n                        <button className=\"Button\"> \n                        <img width={17} src={addIcon} alt=\"\"/>\n                        </button>\n                        \n                    </form>\n\n                </div>\n            </div>\n        );\n    }\n\n    saveToStorage() {\n        let data = this.state.history;\n        data.dictionaries = this.state.dictionaries;\n        localStorage.setItem('dictionaries', JSON.stringify(data));\n    }\n\n    componentDidMount() {\n        this.recover();\n    }\n\n    recover() {\n        //error catch\n        let data = JSON.parse(localStorage.getItem('dictionaries'));\n        if (!data) {\n            return;\n        }\n        console.log(data);\n        this.setState({\n            history: data,\n            dictionaries: data.dictionaries,\n        });\n    }\n}\nexport default Dictionaries;\n"]},"metadata":{},"sourceType":"module"}